$ramcell = 70;
$ramlimit = 120;
$startLine = 15000;
$lenlimit = 2600;
$thread = 0;

$import <charlib>;

final var fwidth = 72;
final var fheight = 35;

final var mapWidth = 10;
final var mapHeight = 23;

final var backgroundR = 255;
final var backgroundG = 255;
final var backgroundB = 255;

final var border1X = 1;
final var border2X = border1X+mapWidth+1;
final var borderY = 10;
final var blockSpawnY = 2;

final var nextBlockX = border2X+3;
final var nextBlockY = borderY+4;

final var povarsX = nextBlockX+10;
final var povarsY = blockSpawnY-5;

final var ticksToFall = 2;
final var ticksToNewBlock = 6;

var getR;
var getG;
var getB;

var blockR;
var blockG;
var blockB;

var blockX;
var blockY;
var blockType;

var[][] block = new var[4][4];

var collision;
var continu;
var justNewBlock;
var doWait;
var nextBlock;
var povars;

void main() {
	tetris_play();
}

void tetris_play() {
	width = fwidth;
	height = fheight;
	stype = rgb;
	doWait = 1;
	collision = 0;
	continu = 0;
	povars = 0;
	
	keyboard = -1;
	
	tetris_drawBorders();
	
	nextBlock = random(0, 6);
	
	tetris_newBlock();
	tetris_drawBlock(blockX, blockY);
	tetris_drawPovars();
	
	while(true) {
		tetris_down();
		
		if(collision==1) {
			blockY--;
			tetris_collision();
			continue;
		}
		tetris_drawBlock(blockX, blockY);
		
		tetris_keyboardEvent();
		if(continu==1) {
			continu=0;
			continue;
		}
		
		justNewBlock = 0;
		if(doWait==1) {
			wait(ticksToFall);
			tetris_keyboardEvent();
			wait(ticksToFall);
			tetris_keyboardEvent();
		}
	}
}

void tetris_keyboardEvent() {
	if(keyboard!=-1) {
		if(keyboard=='l') {
			tetris_lose();
		} else if(keyboard=='s') {
			continu = 1;
		} else if(keyboard=='a') {
			tetris_left();
		} else if(keyboard=='d') {
			tetris_right();
		} else if(keyboard=='e') {
			tetris_rotate_right();
		} else if(keyboard=='q') {
			tetris_rotate_left();
		} else if(keyboard=='w') {
			doWait = 0;
		}
		keyboard=-1;	
	}
}

void tetris_collision() {
	if(justNewBlock == 1) {
		tetris_lose();
	}
	
	var rowsCleared = tetris_checkRows();
	if(rowsCleared != 0) {
		addPoints(rowsCleared);
		tetris_drawPovars();
	}
	
	doWait = 1;
	justNewBlock = 1;
	collision = 0;
	tetris_newBlock();
	tetris_drawBlock(blockX, blockY);
	
	wait(ticksToNewBlock);
}

void addPoints(var rowsCleared) {
	if(rowsCleared==1) {
		povars+=40;	
	} else if(rowsCleared==2) {
		povars+=100;
	} else if(rowsCleared==3) {
		povars+=300;
	} else if(rowsCleared==4) {
		povars+=1200;	
	}
}

var tetris_checkRows() {
	blockY++;
		var to;
		for(var i=0; i<4; i++) {	
			for(var h=0; h<4; h++) {	
				if(block[h][i]==1) {
					to = i+blockY;
					break 2;
				}
			}
		}
		var from;
		for(var i=4; i>=0; i--) {	
			for(var h=0; h<4; h++) {	
				if(block[h][i]==1) {
					from = i+blockY;
					break 2;
				}
			}
		}
	
	var rowsCleared = 0;
	for(var y=to; y>=from; y--) {
		if(tetris_checkRow(y)==1) {
			tetris_dropLayersDown(y);
			y++;
			rowsCleared++;
		}
	}
	return rowsCleared;
}

var tetris_checkRow(var y) {
	for(var x=border1X+1; x<border1X+mapWidth+1; x++) {
		getpixel(x, y, getR, getG, getB);
		if(getR==255) {
			return 0;
		}
	}
	return 1;
}

void tetris_dropLayersDown(var y) {
	for(; y>blockSpawnY; y--) {
		var y1 = y-1;
		for(var x=border1X+1; x<border1X+mapWidth+1; x++) {
			getpixel(x, y1, getR, getG, getB);
			pixelcache(getR, getG, getB);
			setpixel(x, y);
		}
	}
}

void tetris_drawPovars() {
	var[] chars = new var[7];
	var t1 = povars;
	var len = 0;
	
	if(povars == 0) {
		chars[6] = '0';
		len = 1;
	} else {
		for(; t1>0; len++) { 
			var t2 = t1 % 10;
			chars[6-len] = t2 + '0';
			t1/=10;
			t1-=t1%1;
		}
	}
	
	//clear previous value
	pixelcache(255,255,255);
	var _width = len*7+povarsX;
	for(var y=povarsY+5; y<povarsY+13; y++) {
		for(var x=povarsX; x<_width; x++) {
			setpixel(x,y);
		}
	}
	pixelcache(rgb_black);
	var x = povarsX;
	for(var i=7-len; i<7; i++) {
		x+=smalldrawchar(x, povarsY, chars[i]);
	}
}

void tetris_lose() {
	pixelcache(rgb_blue);
	drawstring(15, 15, "'r' to retry", "small", 0);
	drawstring(15, 22, "'e' to exit", "small", 0);
	
	while(true) {
		if(keyboard != -1) {
			if(keyboard=='r') {
				tetris_play();
				exit();
			} else if(keyboard=='e') {
				exit();
			}
		}
		wait(1);
	}
	
	exit();	
}

void tetris_drawNextBlock() {
	tetris_setBlockArrayFromBlockType(nextBlock);
	
	pixelcache(255, 255, 255);
	for(var y=nextBlockY; y<nextBlockY+4; y++) {
		for(var x=nextBlockX; x<nextBlockX+4; x++) {
			setpixel(x,y);
		}	
	}
	tetris_drawBlock(nextBlockX, nextBlockY);
}

void tetris_newBlock() {
	blockType = nextBlock;
	nextBlock = random(0, 6);
	
	tetris_drawNextBlock();
	
	justNewBlock = 1;
	
	blockX = border1X+(mapWidth/2)-1;
	blockY = blockSpawnY;
	
	tetris_setBlockArrayFromBlockType(blockType);
}

void tetris_setBlockArrayFromBlockType(var type) {
	if(type==0) {	
		blockR = 1;
		blockG = 254;
		blockB = 254;
		block[0][0] = 0;
		block[1][0] = 1;
		block[2][0] = 0;
		block[3][0] = 0;
		
		block[0][1] = 0;
		block[1][1] = 1;
		block[2][1] = 0;
		block[3][1] = 0;
		
		block[0][2] = 0;
		block[1][2] = 1;
		block[2][2] = 0;
		block[3][2] = 0;
		
		block[0][3] = 0;
		block[1][3] = 1;
		block[2][3] = 0;
		block[3][3] = 0;
		
	}	
	else if(type==1) {
		blockR = 88;
		blockG = 102;
		blockB = 175;
		block[0][0] = 0;
		block[1][0] = 1;
		block[2][0] = 0;
		block[3][0] = 0;
		
		block[0][1] = 0;
		block[1][1] = 1;
		block[2][1] = 1;
		block[3][1] = 1;
		
		block[0][2] = 0;
		block[1][2] = 0;
		block[2][2] = 0;
		block[3][2] = 0;
		
		block[0][3] = 0;
		block[1][3] = 0;
		block[2][3] = 0;
		block[3][3] = 0;
	}
	else if(type==2) {
		blockR = 239;
		blockG = 121;
		blockB = 34;
		block[0][0] = 0;
		block[1][0] = 0;
		block[2][0] = 0;
		block[3][0] = 1;
		
		block[0][1] = 0;
		block[1][1] = 1;
		block[2][1] = 1;
		block[3][1] = 1;
		
		block[0][2] = 0;
		block[1][2] = 0;
		block[2][2] = 0;
		block[3][2] = 0;
		
		block[0][3] = 0;
		block[1][3] = 0;
		block[2][3] = 0;
		block[3][3] = 0;
	}
	else if(type==3) {
		blockR = 247;
		blockG = 214;
		blockB = 9;
		block[0][0] = 0;
		block[1][0] = 0;
		block[2][0] = 0;
		block[3][0] = 0;
		
		block[0][1] = 0;
		block[1][1] = 1;
		block[2][1] = 1;
		block[3][1] = 0;
		
		block[0][2] = 0;
		block[1][2] = 1;
		block[2][2] = 1;
		block[3][2] = 0;
		
		block[0][3] = 0;
		block[1][3] = 0;
		block[2][3] = 0;
		block[3][3] = 0;
	}
	else if(type==4) {
		blockR = 64;
		blockG = 183;
		blockB = 63;
		block[0][0] = 0;
		block[1][0] = 0;
		block[2][0] = 0;
		block[3][0] = 0;
		
		block[0][1] = 0;
		block[1][1] = 1;
		block[2][1] = 1;
		block[3][1] = 0;
		
		block[0][2] = 1;
		block[1][2] = 1;
		block[2][2] = 0;
		block[3][2] = 0;
		
		block[0][3] = 0;
		block[1][3] = 0;
		block[2][3] = 0;
		block[3][3] = 0;
	} 
	else if(type==5) {
		blockR = 174;
		blockG = 77;
		blockB = 158;
		block[0][0] = 0;
		block[1][0] = 0;
		block[2][0] = 0;
		block[3][0] = 0;
		
		block[0][1] = 0;
		block[1][1] = 1;
		block[2][1] = 0;
		block[3][1] = 0;
		
		block[0][2] = 1;
		block[1][2] = 1;
		block[2][2] = 1;
		block[3][2] = 0;
		
		block[0][3] = 0;
		block[1][3] = 0;
		block[2][3] = 0;
		block[3][3] = 0;
	} 
	else if(type==6) {
		blockR = 240;
		blockG = 30;
		blockB = 43;
		block[0][0] = 0;
		block[1][0] = 0;
		block[2][0] = 0;
		block[3][0] = 0;
		
		block[0][1] = 0;
		block[1][1] = 1;
		block[2][1] = 1;
		block[3][1] = 0;
		
		block[0][2] = 0;
		block[1][2] = 0;
		block[2][2] = 1;
		block[3][2] = 1;
		
		block[0][3] = 0;
		block[1][3] = 0;
		block[2][3] = 0;
		block[3][3] = 0;
	}
}

void tetris_drawBorders() {
	//map borders
	pixelcache(rgb_black);
	for(var y=borderY; y<borderY+mapHeight+1; y++) {
		setpixel(border1X, y);
		setpixel(border2X, y);
	}
	for(var x=border1X+1; x<border1X+1+mapWidth; x++) {
		setpixel(x, borderY+mapHeight);
	}
	pixelcache(rgb_lime);
	drawstring(nextBlockX+6, nextBlockY-7, "<- Next", "small", 0);
	
	//povars border
	pixelcache(rgb_red);
	for(var y=povarsY+4; y<povarsY+14; y++) {
		setpixel(povarsX-2, y);
		setpixel(povarsX-2+47, y);
	}
	for(var x=povarsX-2; x<povarsX+46; x++) {
		setpixel(x, povarsY+4);
		setpixel(x, povarsY+13);
	}
	
	
}


void tetris_down() {
	var x1 = blockX+1;
	var x2 = blockX+2;
	var x3 = blockX+3;
	
	var y1 = blockY+1;
	var y2 = blockY+2;
	var y3 = blockY+3;
	var y4 = blockY+4;
	
	if(block[0][0]==1) { if(block[0][1]==0) {getpixel(blockX, y1, getR, getG, getB); if(getR!=255) {collision=1; return;}}}
	if(block[1][0]==1) { if(block[1][1]==0) {getpixel(x1, y1, getR, getG, getB); if(getR!=255) {collision=1; return;}} }
	if(block[2][0]==1) { if(block[2][1]==0) {getpixel(x2, y1, getR, getG, getB); if(getR!=255) {collision=1; return;}} }
	if(block[3][0]==1) { if(block[3][1]==0) {getpixel(x3, y1, getR, getG, getB); if(getR!=255) {collision=1; return;}} }

	
	if(block[0][1]==1) { if(block[0][2]==0) {getpixel(blockX, y2, getR, getG, getB); if(getR!=255) {collision=1; return;}}}
	if(block[1][1]==1) { if(block[1][2]==0) {getpixel(x1, y2, getR, getG, getB); if(getR!=255) {collision=1; return;}} }
	if(block[2][1]==1) { if(block[2][2]==0) {getpixel(x2, y2, getR, getG, getB); if(getR!=255) {collision=1; return;}} }
	if(block[3][1]==1) { if(block[3][2]==0) {getpixel(x3, y2, getR, getG, getB); if(getR!=255) {collision=1; return;}} }

	
	if(block[0][2]==1) { if(block[0][3]==0) {getpixel(blockX, y3, getR, getG, getB); if(getR!=255) {collision=1; return;}}}
	if(block[1][2]==1) { if(block[1][3]==0) {getpixel(x1, y3, getR, getG, getB); if(getR!=255) {collision=1; return;}} }
	if(block[2][2]==1) { if(block[2][3]==0) {getpixel(x2, y3, getR, getG, getB); if(getR!=255) {collision=1; return;}} }
	if(block[3][2]==1) { if(block[3][3]==0) {getpixel(x3, y3, getR, getG, getB); if(getR!=255) {collision=1; return;}} }

	
	if(block[0][3]==1) { getpixel(blockX, y4, getR, getG, getB); if(getR!=255) {collision=1; return; } }
	if(block[1][3]==1) { getpixel(x1, y4, getR, getG, getB); if(getR!=255) {collision=1; return; } }
	if(block[2][3]==1) { getpixel(x2, y4, getR, getG, getB); if(getR!=255) {collision=1; return; } }
	if(block[3][3]==1) { getpixel(x3, y4, getR, getG, getB); if(getR!=255) {collision=1; return; } }
	
	pixelcache(backgroundR, backgroundG, backgroundB);
	
	if(block[0][0]==1) { setpixel(blockX, blockY); }
	if(block[1][0]==1) { setpixel(x1, blockY); }
	if(block[2][0]==1) { setpixel(x2, blockY); }
	if(block[3][0]==1) { setpixel(x3, blockY); }

	if(block[0][1]==1) { setpixel(blockX, y1); }
	if(block[1][1]==1) { setpixel(x1, y1); }
	if(block[2][1]==1) { setpixel(x2, y1); }
	if(block[3][1]==1) { setpixel(x3, y1); }

	if(block[0][2]==1) { setpixel(blockX, y2); }
	if(block[1][2]==1) { setpixel(x1, y2); }
	if(block[2][2]==1) { setpixel(x2, y2); }
	if(block[3][2]==1) { setpixel(x3, y2); }

	if(block[0][3]==1) { setpixel(blockX, y3); }
	if(block[1][3]==1) { setpixel(x1, y3); }
	if(block[2][3]==1) { setpixel(x2, y3); }
	if(block[3][3]==1) { setpixel(x3, y3); }

	
	blockY++;	
}

void tetris_right() {
	var x1 = blockX+1;
	var x2 = blockX+2;
	var x3 = blockX+3;
	var x4 = blockX+4;
	
	var y1 = blockY+1;
	var y2 = blockY+2;
	var y3 = blockY+3;
	
	if(block[0][0]==1) { if(block[1][0]==0) {getpixel(x1, blockY, getR, getG, getB); if(getR!=255) {return;}}}
	if(block[0][1]==1) { if(block[1][1]==0) {getpixel(x1, y1, getR, getG, getB); if(getR!=255) {return;}}}
	if(block[0][2]==1) { if(block[1][2]==0) {getpixel(x1, y2, getR, getG, getB); if(getR!=255) {return;}}}
	if(block[0][3]==1) { if(block[1][3]==0) {getpixel(x1, y3, getR, getG, getB); if(getR!=255) {return;}}}
	
	if(block[1][0]==1) { if(block[2][0]==0) {getpixel(x2, blockY, getR, getG, getB); if(getR!=255) {return;}}}
	if(block[1][1]==1) { if(block[2][1]==0) {getpixel(x2, y1, getR, getG, getB); if(getR!=255) {return;}}}
	if(block[1][2]==1) { if(block[2][2]==0) {getpixel(x2, y2, getR, getG, getB); if(getR!=255) {return;}}}
	if(block[1][3]==1) { if(block[2][3]==0) {getpixel(x2, y3, getR, getG, getB); if(getR!=255) {return;}}}
	
	if(block[2][0]==1) { if(block[3][0]==0) {getpixel(x3, blockY, getR, getG, getB); if(getR!=255) {return;}}}
	if(block[2][1]==1) { if(block[3][1]==0) {getpixel(x3, y1, getR, getG, getB); if(getR!=255) {return;}}}
	if(block[2][2]==1) { if(block[3][2]==0) {getpixel(x3, y2, getR, getG, getB); if(getR!=255) {return;}}}
	if(block[2][3]==1) { if(block[3][3]==0) {getpixel(x3, y3, getR, getG, getB); if(getR!=255) {return;}}}
	
	if(block[3][0]==1) { getpixel(x4, blockY, getR, getG, getB); if(getR!=255) {return;}}
	if(block[3][1]==1) { getpixel(x4, y1, getR, getG, getB); if(getR!=255) {return;}}
	if(block[3][2]==1) { getpixel(x4, y2, getR, getG, getB); if(getR!=255) {return;}}
	if(block[3][3]==1) { getpixel(x4, y3, getR, getG, getB); if(getR!=255) {return;}}
	
	pixelcache(backgroundR, backgroundG, backgroundB);
	
	if(block[0][0]==1) { setpixel(blockX, blockY); }
	if(block[1][0]==1) { setpixel(x1, blockY); }
	if(block[2][0]==1) { setpixel(x2, blockY); }
	if(block[3][0]==1) { setpixel(x3, blockY); }

	if(block[0][1]==1) { setpixel(blockX, y1); }
	if(block[1][1]==1) { setpixel(x1, y1); }
	if(block[2][1]==1) { setpixel(x2, y1); }
	if(block[3][1]==1) { setpixel(x3, y1); }

	if(block[0][2]==1) { setpixel(blockX, y2); }
	if(block[1][2]==1) { setpixel(x1, y2); }
	if(block[2][2]==1) { setpixel(x2, y2); }
	if(block[3][2]==1) { setpixel(x3, y2); }

	if(block[0][3]==1) { setpixel(blockX, y3); }
	if(block[1][3]==1) { setpixel(x1, y3); }
	if(block[2][3]==1) { setpixel(x2, y3); }
	if(block[3][3]==1) { setpixel(x3, y3); }
	

	blockX++;
	tetris_drawBlock(blockX, blockY);
}

void tetris_left() {
	var x_1 = blockX - 1;
	var x1 = blockX+1;
	var x2 = blockX+2;
	var x3 = blockX+3;
	
	var y1 = blockY+1;
	var y2 = blockY+2;
	var y3 = blockY+3;	
	
	if(block[3][0]==1) { if(block[2][0]==0) {getpixel(x2, blockY, getR, getG, getB); if(getR!=255) {return;}}}
	if(block[3][1]==1) { if(block[2][1]==0) {getpixel(x2, y1, getR, getG, getB); if(getR!=255) {return;}}}
	if(block[3][2]==1) { if(block[2][2]==0) {getpixel(x2, y2, getR, getG, getB); if(getR!=255) {return;}}}
	if(block[3][3]==1) { if(block[2][3]==0) {getpixel(x2, y3, getR, getG, getB); if(getR!=255) {return;}}}
	
	if(block[2][0]==1) { if(block[1][0]==0) {getpixel(x1, blockY, getR, getG, getB); if(getR!=255) {return;}}}
	if(block[2][1]==1) { if(block[1][1]==0) {getpixel(x1, y1, getR, getG, getB); if(getR!=255) {return;}}}
	if(block[2][2]==1) { if(block[1][2]==0) {getpixel(x1, y2, getR, getG, getB); if(getR!=255) {return;}}}
	if(block[2][3]==1) { if(block[1][3]==0) {getpixel(x1, y3, getR, getG, getB); if(getR!=255) {return;}}}
	
	if(block[1][0]==1) { if(block[0][0]==0) {getpixel(blockX, blockY, getR, getG, getB); if(getR!=255) {return;}}}
	if(block[1][1]==1) { if(block[0][1]==0) {getpixel(blockX, y1, getR, getG, getB); if(getR!=255) {return;}}}
	if(block[1][2]==1) { if(block[0][2]==0) {getpixel(blockX, y2, getR, getG, getB); if(getR!=255) {return;}}}
	if(block[1][3]==1) { if(block[0][3]==0) {getpixel(blockX, y3, getR, getG, getB); if(getR!=255) {return;}}}
	
	if(block[0][0]==1) {getpixel(x_1, blockY, getR, getG, getB); if(getR!=255) {return;}}
	if(block[0][1]==1) {getpixel(x_1, y1, getR, getG, getB); if(getR!=255) {return;}}
	if(block[0][2]==1) {getpixel(x_1, y2, getR, getG, getB); if(getR!=255) {return;}}
	if(block[0][3]==1) {getpixel(x_1, y3, getR, getG, getB); if(getR!=255) {return;}}
	
	pixelcache(backgroundR, backgroundG, backgroundB);
	
	if(block[0][0]==1) { setpixel(blockX, blockY); }
	if(block[1][0]==1) { setpixel(x1, blockY); }
	if(block[2][0]==1) { setpixel(x2, blockY); }
	if(block[3][0]==1) { setpixel(x3, blockY); }

	if(block[0][1]==1) { setpixel(blockX, y1); }
	if(block[1][1]==1) { setpixel(x1, y1); }
	if(block[2][1]==1) { setpixel(x2, y1); }
	if(block[3][1]==1) { setpixel(x3, y1); }

	if(block[0][2]==1) { setpixel(blockX, y2); }
	if(block[1][2]==1) { setpixel(x1, y2); }
	if(block[2][2]==1) { setpixel(x2, y2); }
	if(block[3][2]==1) { setpixel(x3, y2); }

	if(block[0][3]==1) { setpixel(blockX, y3); }
	if(block[1][3]==1) { setpixel(x1, y3); }
	if(block[2][3]==1) { setpixel(x2, y3); }
	if(block[3][3]==1) { setpixel(x3, y3); }
	
	
	blockX--;
	tetris_drawBlock(blockX, blockY);
}

void tetris_rotate_right() {
	var x1 = blockX+1;
	var x2 = blockX+2;
	var x3 = blockX+3;
	
	var y1 = blockY+1;
	var y2 = blockY+2;
	var y3 = blockY+3;
	
	var t0;
	var t1;
	
	if(block[0][0]==1) { if(block[3][0]==0) {getpixel(x3, blockY, getR, getG, getB); if(getR!=255) {return;}}}
	if(block[1][0]==1) { if(block[3][1]==0) {getpixel(x3, y1, getR, getG, getB); if(getR!=255) {return;}}}
	if(block[2][0]==1) { if(block[3][2]==0) {getpixel(x3, y2, getR, getG, getB); if(getR!=255) {return;}}}
	if(block[3][0]==1) { if(block[3][3]==0) {getpixel(x3, y3, getR, getG, getB); if(getR!=255) {return;}}}

	if(block[0][1]==1) { if(block[2][0]==0) {getpixel(x2, blockY, getR, getG, getB); if(getR!=255) {return;}}}
	if(block[1][1]==1) { if(block[2][1]==0) {getpixel(x2, y1, getR, getG, getB); if(getR!=255) {return;}}}
	if(block[2][1]==1) { if(block[2][2]==0) {getpixel(x2, y2, getR, getG, getB); if(getR!=255) {return;}}}
	if(block[3][1]==1) { if(block[2][3]==0) {getpixel(x2, y3, getR, getG, getB); if(getR!=255) {return;}}}

	if(block[0][2]==1) { if(block[1][0]==0) {getpixel(x1, blockY, getR, getG, getB); if(getR!=255) {return;}}}
	if(block[1][2]==1) { if(block[1][1]==0) {getpixel(x1, y1, getR, getG, getB); if(getR!=255) {return;}}}
	if(block[2][2]==1) { if(block[1][2]==0) {getpixel(x1, y2, getR, getG, getB); if(getR!=255) {return;}}}
	if(block[3][2]==1) { if(block[1][3]==0) {getpixel(x1, y3, getR, getG, getB); if(getR!=255) {return;}}}

	if(block[0][3]==1) { if(block[0][0]==0) {getpixel(blockX, blockY, getR, getG, getB); if(getR!=255) {return;}}}
	if(block[1][3]==1) { if(block[0][1]==0) {getpixel(blockX, y1, getR, getG, getB); if(getR!=255) {return;}}}
	if(block[2][3]==1) { if(block[0][2]==0) {getpixel(blockX, y2, getR, getG, getB); if(getR!=255) {return;}}}
	if(block[3][3]==1) { if(block[0][3]==0) {getpixel(blockX, y3, getR, getG, getB); if(getR!=255) {return;}}}

	pixelcache(backgroundR, backgroundG, backgroundB);
	
	if(block[0][0]==1) { setpixel(blockX, blockY); }
	if(block[1][0]==1) { setpixel(x1, blockY); }
	if(block[2][0]==1) { setpixel(x2, blockY); }
	if(block[3][0]==1) { setpixel(x3, blockY); }

	if(block[0][1]==1) { setpixel(blockX, y1); }
	if(block[1][1]==1) { setpixel(x1, y1); }
	if(block[2][1]==1) { setpixel(x2, y1); }
	if(block[3][1]==1) { setpixel(x3, y1); }

	if(block[0][2]==1) { setpixel(blockX, y2); }
	if(block[1][2]==1) { setpixel(x1, y2); }
	if(block[2][2]==1) { setpixel(x2, y2); }
	if(block[3][2]==1) { setpixel(x3, y2); }

	if(block[0][3]==1) { setpixel(blockX, y3); }
	if(block[1][3]==1) { setpixel(x1, y3); }
	if(block[2][3]==1) { setpixel(x2, y3); }
	if(block[3][3]==1) { setpixel(x3, y3); }

	t0 = block[3][0];
	t1 = block[0][0];
	if(block[0][0]==1) { block[0][0] = 0; block[3][0] = 1; }
	if(block[0][3]==1) { block[0][3] = 0; block[0][0] = 1; }
	if(block[3][3]==1) { block[3][3] = 0; block[0][3] = 1; }
	if(t0==1) 	 { if(t1==0) {block[3][0] = 0; } block[3][3] = 1; }


	t0 = block[3][1];
	t1 = block[1][0];
	if(block[1][0]==1) { block[1][0] = 0; block[3][1] = 1; }
	if(block[0][2]==1) { block[0][2] = 0; block[1][0] = 1; }
	if(block[2][3]==1) { block[2][3] = 0; block[0][2] = 1; }
	if(t0==1) 	 { if(t1==0) {block[3][1] = 0; } block[2][3] = 1; }


	t0 = block[3][2];
	t1 = block[2][0];
	if(block[2][0]==1) { block[2][0] = 0; block[3][2] = 1; }
	if(block[0][1]==1) { block[0][1] = 0; block[2][0] = 1; }
	if(block[1][3]==1) { block[1][3] = 0; block[0][1] = 1; }
	if(t0==1) 	 { if(t1==0) {block[3][2] = 0; } block[1][3] = 1; }


	t0 = block[2][1];
	t1 = block[1][1];
	if(block[1][1]==1) { block[1][1] = 0; block[2][1] = 1; }
	if(block[1][2]==1) { block[1][2] = 0; block[1][1] = 1; }
	if(block[2][2]==1) { block[2][2] = 0; block[1][2] = 1; }
	if(t0==1) 	 { if(t1==0) {block[2][1] = 0; } block[2][2] = 1; }

	tetris_drawBlock(blockX, blockY);
}

void tetris_rotate_left() {
	var x1 = blockX+1;
	var x2 = blockX+2;
	var x3 = blockX+3;
	
	var y1 = blockY+1;
	var y2 = blockY+2;
	var y3 = blockY+3;
	
	var t0;
	var t1;
	
	if(block[0][0]==1) { if(block[0][3]==0) {getpixel(blockX, y3, getR, getG, getB); if(getR!=255) {return;}}}
	if(block[1][0]==1) { if(block[0][2]==0) {getpixel(blockX, y2, getR, getG, getB); if(getR!=255) {return;}}}
	if(block[2][0]==1) { if(block[0][1]==0) {getpixel(blockX, y1, getR, getG, getB); if(getR!=255) {return;}}}
	if(block[3][0]==1) { if(block[0][0]==0) {getpixel(blockX, blockY, getR, getG, getB); if(getR!=255) {return;}}}

	if(block[0][1]==1) { if(block[1][3]==0) {getpixel(x1, y3, getR, getG, getB); if(getR!=255) {return;}}}
	if(block[1][1]==1) { if(block[1][2]==0) {getpixel(x1, y2, getR, getG, getB); if(getR!=255) {return;}}}
	if(block[2][1]==1) { if(block[1][1]==0) {getpixel(x1, y1, getR, getG, getB); if(getR!=255) {return;}}}
	if(block[3][1]==1) { if(block[1][0]==0) {getpixel(x1, blockY, getR, getG, getB); if(getR!=255) {return;}}}

	if(block[0][2]==1) { if(block[2][3]==0) {getpixel(x2, y3, getR, getG, getB); if(getR!=255) {return;}}}
	if(block[1][2]==1) { if(block[2][2]==0) {getpixel(x2, y2, getR, getG, getB); if(getR!=255) {return;}}}
	if(block[2][2]==1) { if(block[2][1]==0) {getpixel(x2, y1, getR, getG, getB); if(getR!=255) {return;}}}
	if(block[3][2]==1) { if(block[2][0]==0) {getpixel(x2, blockY, getR, getG, getB); if(getR!=255) {return;}}}

	if(block[0][3]==1) { if(block[3][3]==0) {getpixel(x3, y3, getR, getG, getB); if(getR!=255) {return;}}}
	if(block[1][3]==1) { if(block[3][2]==0) {getpixel(x3, y2, getR, getG, getB); if(getR!=255) {return;}}}
	if(block[2][3]==1) { if(block[3][1]==0) {getpixel(x3, y1, getR, getG, getB); if(getR!=255) {return;}}}
	if(block[3][3]==1) { if(block[3][0]==0) {getpixel(x3, blockY, getR, getG, getB); if(getR!=255) {return;}}}

	pixelcache(backgroundR, backgroundG, backgroundB);
	
	if(block[0][0]==1) { setpixel(blockX, blockY); }
	if(block[1][0]==1) { setpixel(x1, blockY); }
	if(block[2][0]==1) { setpixel(x2, blockY); }
	if(block[3][0]==1) { setpixel(x3, blockY); }

	if(block[0][1]==1) { setpixel(blockX, y1); }
	if(block[1][1]==1) { setpixel(x1, y1); }
	if(block[2][1]==1) { setpixel(x2, y1); }
	if(block[3][1]==1) { setpixel(x3, y1); }

	if(block[0][2]==1) { setpixel(blockX, y2); }
	if(block[1][2]==1) { setpixel(x1, y2); }
	if(block[2][2]==1) { setpixel(x2, y2); }
	if(block[3][2]==1) { setpixel(x3, y2); }

	if(block[0][3]==1) { setpixel(blockX, y3); }
	if(block[1][3]==1) { setpixel(x1, y3); }
	if(block[2][3]==1) { setpixel(x2, y3); }
	if(block[3][3]==1) { setpixel(x3, y3); }

	t0 = block[0][3];
	t1 = block[0][0];
	if(block[0][0]==1) { block[0][0] = 0; block[0][3] = 1; }
	if(block[3][0]==1) { block[3][0] = 0; block[0][0] = 1; }
	if(block[3][3]==1) { block[3][3] = 0; block[3][0] = 1; }
	if(t0==1) 	 { if(t1==0) {block[0][3] = 0; } block[3][3] = 1; }

	t0 = block[0][2];
	t1 = block[1][0];
	if(block[1][0]==1) { block[1][0] = 0; block[0][2] = 1; }
	if(block[3][1]==1) { block[3][1] = 0; block[1][0] = 1; }
	if(block[2][3]==1) { block[2][3] = 0; block[3][1] = 1; }
	if(t0==1) 	 { if(t1==0) {block[0][2] = 0; } block[2][3] = 1; }

	t0 = block[0][1];
	t1 = block[2][0];
	if(block[2][0]==1) { block[2][0] = 0; block[0][1] = 1; }
	if(block[3][2]==1) { block[3][2] = 0; block[2][0] = 1; }
	if(block[1][3]==1) { block[1][3] = 0; block[3][2] = 1; }
	if(t0==1) 	 { if(t1==0) {block[0][1] = 0; } block[1][3] = 1; }

	t0 = block[1][2];
	t1 = block[1][1];
	if(block[1][1]==1) { block[1][1] = 0; block[1][2] = 1; }
	if(block[2][1]==1) { block[2][1] = 0; block[1][1] = 1; }
	if(block[2][2]==1) { block[2][2] = 0; block[2][1] = 1; }
	if(t0==1) 	 { if(t1==0) {block[1][2] = 0; } block[2][2] = 1; }

	tetris_drawBlock(blockX, blockY);
}

void tetris_drawBlock(var x0, var y0) {
	var x1 = x0+1;
	var x2 = x0+2;
	var x3 = x0+3;
	
	var y1 = y0+1;
	var y2 = y0+2;
	var y3 = y0+3;
	
	pixelcache(blockR, blockG, blockB);
	
	if(block[0][0] == 1) { setpixel(x0, y0); }
	if(block[1][0] == 1) { setpixel(x1, y0); }
	if(block[2][0] == 1) { setpixel(x2, y0); }
	if(block[3][0] == 1) { setpixel(x3, y0); }

	if(block[0][1] == 1) { setpixel(x0, y1); }
	if(block[1][1] == 1) { setpixel(x1, y1); }
	if(block[2][1] == 1) { setpixel(x2, y1); }
	if(block[3][1] == 1) { setpixel(x3, y1); }

	if(block[0][2] == 1) { setpixel(x0, y2); }
	if(block[1][2] == 1) { setpixel(x1, y2); }
	if(block[2][2] == 1) { setpixel(x2, y2); }
	if(block[3][2] == 1) { setpixel(x3, y2); }

	if(block[0][3] == 1) { setpixel(x0, y3); }
	if(block[1][3] == 1) { setpixel(x1, y3); }
	if(block[2][3] == 1) { setpixel(x2, y3); }
	if(block[3][3] == 1) { setpixel(x3, y3); }
}